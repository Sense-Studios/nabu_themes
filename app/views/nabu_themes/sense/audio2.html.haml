:css
  body{margin: 20px;overflow: scroll;}
  .blink{background-color:red;opacity:1;display:inline-block;width:32px;height:32px;float:left;}
  .blink2{background-color:blue;opacity:1;display:inline-block;width:32px;height:32px;float:left;}

.row
  .col-xs-1
    .blink
  .col-xs-1
    .blink2
  .col-xs-10
    %h3
      BPM Analysis
      %small
        %a{:href=>"javascript:audio.play();"} play
        %a{:href=>"javascript:audio.pause();"} pause


%canvas#canvas1{:style=>'width:100%;height:400px'}
%pre#info
.row
  .col-xs-6
    peak treshold
    %strong#treshold_display 0
    %input#treshold{:type=>"range", :disabled=>"true", :value=>0.7, :step=>0.01, :min => 0, :max => 2}
    %br
    %br
    %em
      %small effects data, but not audible *
    %br
    lowpass frequency:
    %strong#lowpass_frequency_display 0
    %input#lowpass_frequency{:type=>"range", :value=>0, :step=>1, :min => 0, :max => 4000}
    %br
    lowpass quality:
    %strong#lowpass_quality_display 0
    %input#lowpass_quality{:type=>"range", :value=>0.5, :step=>0.01, :min => 0, :max => 30}
  .col-xs-6
    %pre#info2

:javascript

  // variables -----------------------------------------------------------------
  var audio, context, source, bandpassFilter, analyser, start, bufferLength, dataArray
  var lowpass_quality, lowpass_frequency, treshold
  var cnv, ctx

  // setup ---------------------------------------------------------------------
  audio = new Audio()
  context = new AudioContext(); // AudioContext object instance
  source = context.createMediaElementSource(audio);
  bandpassFilter = context.createBiquadFilter();
  analyser = context.createAnalyser()
  start = Date.now()

  // config --------------------------------------------------------------------
  lowpass_frequency = 350
  lowpass_quality = 1
  treshold = 0.98

  window.bpm = 0
  window.confidence = "low"
  window.calibrating = "calibrating"
  window.nosound = true
  var c = 0

  // with ~ 200 samples/s it takes ~ 20 seconds to adjust
  var sampleLength = 4000
  var peak_max = 60
  var peak_min = 15
  var dataSet = new Array(sampleLength)
  var peaks = new Array(sampleLength)
  //var peakTimeOut = false
  //var peakTimeOutMod = 400 // ms
  var foundpeaks = []


  // set audio
  // File1=http://37.220.36.51:8906/;
  // File2=http://37.220.36.53:7904
  // File3=http://37.220.36.53:8904
  // File4=http://208.123.119.17:7904
  audio.src =  'http://nabu.sense-studios.com/proxy.php?url=http://37.220.36.51:8906';
  // audio.src = '/audio/rage_hard.mp3'
  // audio.src = '/audio/i_own_it.mp3'
  // audio.src = '/audio/100_metronome.mp3'
  // audio.src = '/audio/120_metronome.mp3'
  // audio.src = '/audio/140_metronome.mp3'

  audio.controls = true;
  audio.loop = true;
  audio.autoplay = true;

  bandpassFilter.type = "lowpass";
  bandpassFilter.frequency.value = parseInt(lowpass_frequency) //(settings.passFreq ? settings.passFreq : 400);
  bandpassFilter.Q.value = parseInt(lowpass_quality)

  analyser.fftSize = 128;
  var bufferLength = analyser.frequencyBinCount;

  // ---------------------------------------------------------------------------

  var initialize = function() {
    initializeAudio.then( function(r) {
      startPageInteraction();
      //startSampler(1);
      setInterval( startSampler, 1)
      console.log("initialized!")

    }).catch( function(err){
      console.log("error", err)
    });
  }

  var initializeAudio = new Promise( (resolve, reject ) => {
    source.connect(bandpassFilter)
    bandpassFilter.connect(analyser)
    source.connect(context.destination);
    resolve(audio)
    reject(err)
  })

  // The sampler ---------------------------------------------------------------
  var startSampler = function() {
    if ( audio.paused ) return

    dataArray = new Uint8Array(bufferLength);
    analyser.getByteTimeDomainData(dataArray)

    // precalc
    var now = Date.now()
    var high = 0
    dataArray.forEach( (d,i)=> { if ( d > high ) high = d })
    dataSet.push( [ now, high ] )

    if (dataSet.length > sampleLength) dataSet.splice(0, dataSet.length - sampleLength)
    c++

    // SLOWPOKE
    // take a snapshot every 1/10 second and calculate beat
    if ( ( now - start) > 100 ) {

      if (dataSet[0] === undefined ) {
        window.calibrating = "CALIBRATING"
      } else {
        window.calibrating = ""
      }

      getTempo(dataSet)
      getTempoTen( dataSet.slice( -1200 ) )
      // getBlackout
      // getAmbience
      drawData(dataSet)

      if (tempoCounts[0] !== undefined) window.bpm = tempoCounts[0].tempo

      $('#info').html( dataSet.length + "\t " + c * 10 + " samples/s" + "\t peaks: "  + foundpeaks.length + "\tBPM: <strong>"+ Math.round(window.bpm) + " </strong> ("+Math.round(window.bpm2)+") \t\tconfidence: <em>" + window.confidence + " <strong>" + window.calibrating + "</strong></em>" ) //.+ " -- " + _dataSet[ _dataSet.length - 1 ] )

      start = Date.now()
      c = 0
    }

    // rinse and repeat, as fast as we can
  }

  // rewrite of getTempo without display and local vars
  var treshold2 = 1.98
  var getTempoTen = function( _data ) {
    var total = 0
    var peak_max = 16
    var peak_min = 4
    var foundpeaks = []
    for (var i = 0; i < _data.length; i++ ) {
      if ( _data[i] !== undefined && _data[i][1] > (treshold2 * 128) ) {
        //peaks[i] = [ dataSet[i][0], 1 ]
        //peakTimeOut = true
        foundpeaks.push( [ _data[i][0], 1 ] )
        i += 42 // += 0.125s, to move past this peak
      }
    }

    if ( foundpeaks.length < peak_min ) treshold2 -= 0.05
    if ( foundpeaks.length > peak_max ) treshold2 += 0.05
    if ( treshold2 > 2) treshold2 = 2
    if ( treshold2 < 1.1) treshold2 = 1.1

    for( var i = 1; i < foundpeaks.length; i++ ) { total += ( foundpeaks[i][0] - foundpeaks[i-1][0] ) }
    var tempoCounts2 = groupNeighborsByTempo( countIntervalsBetweenNearbyPeaks( foundpeaks ) )
    tempoCounts2.sort( mycomparator )
    window.bpm2 = "n/a"
    //console.log( foundpeaks.length, treshold2 )
    if (tempoCounts2.length > 0) window.bpm2 = tempoCounts2[0].tempo
    //return tempCounts
  }

  // Calculate Tempo
  var getTempo = function( _data ) {
    var total = 0
    foundpeaks = []
    peaks = new Array(sampleLength) // displaypurposes only
    for (var i = 0; i < _data.length; i++ ) {
      if ( dataSet[i] !== undefined && dataSet[i][1] > (treshold * 128) ) {
        peaks[i] = [ dataSet[i][0], 1 ]
        //peakTimeOut = true
        foundpeaks.push( peaks[i] )
        i += 50 // += 0.25s, to move past this peak
      }
    }

    if ( foundpeaks.length < peak_min ) treshold -= 0.05
    if ( foundpeaks.length > peak_max ) treshold += 0.05
    if (treshold > 2) treshold = 2
    if (treshold < 0.5) treshold = 0.5

    for( var i = 1; i < foundpeaks.length; i++ ) { total += ( foundpeaks[i][0] - foundpeaks[i-1][0] ) }
    tempoCounts = groupNeighborsByTempo( countIntervalsBetweenNearbyPeaks( foundpeaks ) )
    tempoCounts.sort( mycomparator )
    // return tempoCounts.reverse()[0]
    //var returnObj {
    //  tempoCounts: tempoCounts,
    //  foundpeaks: foundpeaks,
    //  peaks: peaks
    //}

    // From here on out its kind of all display shit
    // -------------------------------------------------------------------------

    // SITE
    $('#treshold_display').text( treshold )
    $('#treshold').val( treshold )

    // DISPLAY
    var html = ""
    tempoCounts.reverse().forEach(function(v,i) {
      html += i + ", " + v.tempo + ", " + v.count + "\t ["
      var j = 0
      while( j < v.count) {
        html += '#'
        j++
      }
      html += ']<br/>'
    })

    if (tempoCounts[0] === undefined || tempoCounts[1] === undefined) {
      window.confidence = "none"
    }else if (tempoCounts[0].count - tempoCounts[1].count < 4) {
      window.confidence = "low"
    }else if ( tempoCounts[0].count - tempoCounts[1].count < 7) {
      window.confidence = "average"
    }else{
      window.confidence = "high"
    }

    if (window.calibrating == "CALIBRATING") {
      window.confidence = "low"
    }

    $('#info2').html(html)
  }

  // HELPERS ------------------------------------------------------------------

  // blink on the beat
  var doBlink = function() {
    if ( audio.paused ) {
      $('.blink').hide()
    }else{
      $('.blink').toggle()
    }
    setTimeout( doBlink, (60/window.bpm)*1000 )
  }
  doBlink()

  // blink on the beat
  var doBlink2 = function() {
    if ( audio.paused ) {
      $('.blink2').hide()
    }else{
      $('.blink2').toggle()
    }
    setTimeout( doBlink2, (60/window.bpm2)*1000 )
  }
  doBlink2()

  // sort helper
  function mycomparator(a,b) {
    return parseInt(a.count, 10) - parseInt(b.count, 10);
  }

  // generate interval counter
  var intervalCounts = [];
  function countIntervalsBetweenNearbyPeaks(_peaks) {
    intervalCounts = [];
    _peaks.forEach(function(peak, index) {
      for(var i = 0; i < 10; i++) {
        if ( _peaks[index + i] !== undefined ) {
          var interval = _peaks[index + i][0] - peak[0];
          var foundInterval = intervalCounts.some(function(intervalCount) {
            if (intervalCount.interval === interval)
              return intervalCount.count++;
          });
          if (!foundInterval) {
            intervalCounts.push({
              interval: interval,
              count: 1
            });
          }
        }
      }
    });
    return intervalCounts;
  }

  // group
  function groupNeighborsByTempo(intervalCounts, iv ) {

    var tempoCounts = []
    var str = ""
    var noTempo = false
    intervalCounts.forEach(function(intervalCount, i) {

      // Convert an interval to tempo
      if (intervalCount.interval != 0 && !isNaN(intervalCount.interval)) {
        var theoreticalTempo = 60 / (intervalCount.interval / 1000)
      }

      // Adjust the tempo to fit within the 90-180 BPM range
      while (theoreticalTempo < 90) theoreticalTempo *= 2;
      while (theoreticalTempo > 180) theoreticalTempo /= 2;

      // round to 2 beat
      theoreticalTempo = Math.round(theoreticalTempo/2) * 2

      var foundTempo = tempoCounts.some(function(tempoCount) {
        if (tempoCount.tempo === theoreticalTempo && !noTempo )
          return tempoCount.count += intervalCount.count;
      });

      if (!foundTempo) {
        if ( theoreticalTempo && !noTempo ) {
          tempoCounts.push({
            tempo: theoreticalTempo,
            count: intervalCount.count
          })
        }
      }
    });

    return tempoCounts
  }

  // ---------------------------------------------------------------------------

  // to be fair, this is just for fun
  var drawData = function( _dataSet, i ) {
    ctx.fillStyle = 'rgb(0, 0, 0)';
    ctx.fillRect(0, 0, sampleLength, 400);

    var barWidth = 1
    var barHeight
    var x = 0
    var high = 0
    var y = 0

    for(var i = 0; i < _dataSet.length; i++) {
      if ( _dataSet[i] !== undefined ) {
        barHeight = _dataSet[i][1] - 128
        ctx.fillStyle = 'rgb(250,50,50)';
        ctx.fillRect(x, 380 - ( barHeight ), barWidth, barHeight);
        if ( _dataSet[i][1] > high ) high = _dataSet[i][1]
      }
      x += sampleLength/_dataSet.length
    }

    ctx.fillStyle = 'rgb(250,250,50)';
    ctx.fillRect(0, ( 380 - ( treshold * 128 )) + 128, sampleLength, 1);

    ctx.fillStyle = 'rgb(250,50,250)';
    ctx.fillRect(0, ( 380 - ( treshold2 * 128 )) + 128, sampleLength, 1);

    for(var i = 0; i < peaks.length; i++) {
        ctx.fillStyle = 'rgb(250,250,250)';
        if ( peaks[i] !== undefined && peaks[i][1]) ctx.fillRect(y, 20, 3, 20);
        y += sampleLength/peaks.length
    }
  }

  // ---------------------------------------------------------------------------
  var startPageInteraction = function() {
    cnv = document.getElementById('canvas1');
    cnv.width = sampleLength;
    cnv.height = 400;
    ctx = cnv.getContext("2d");

    // handlers
    $('#treshold').change( function() {
      treshold = $(this).val()
      $('#treshold_display').text( Math.round( $(this).val() * 100) / 100)
    })

    $('#lowpass_frequency').change( function() {
      lowpass_frequency = $(this).val()
      $('#lowpass_frequency_display').text($(this).val())
      bandpassFilter.frequency.value = parseInt(lowpass_frequency)
    })

    $('#lowpass_quality').change( function() {
      lowpass_quality = $(this).val()
      $('#lowpass_quality_display').text($(this).val())
      bandpassFilter.Q.value = parseInt(lowpass_quality)
    })

    // init
    $('#treshold_display').text( treshold )
    $('#treshold').val( treshold )
    $('#lowpass_frequency_display').text( lowpass_frequency )
    $('#lowpass_frequency').val( lowpass_frequency )
    $('#lowpass_quality_display').text( lowpass_quality )
    $('#lowpass_quality').val( lowpass_quality )
  }

  // start
  window.addEventListener("load", initialize, false);
